<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1445407146757">{:repl-history {:ide [], :local [&quot;(def schema-tx (read-string (slurp \&quot;resources/schema.edn\&quot;)))&quot; &quot;(pprint schema-tx)&quot; &quot;(def conn (d/connect uri))\n&quot; &quot;\n(def uri \&quot;datomic:free://localhost:4334//news\&quot;)&quot; &quot;(in-ns 'datomic.core)&quot; &quot;(def uri \&quot;datomic:free://localhost:4334//news\&quot;)&quot; &quot;(def db (d/db (d/connect uri)))&quot; &quot;dba&quot; &quot;(def my-great-schema [])&quot; &quot;(d/transact (d/connect uri) my-great-schema)&quot; &quot;\n(def user-schema\n  [{:db/doc \&quot;User email address\&quot;\n    :db/ident :user/email\n    :db/valueType :db.type/string\n    :db/cardinality :db.cardinality/one\n    :db/unique :db.unique/identity\n    :db/id #db/id[:db.part/db]\n    :db.install/_attribute :db.part/db}\n   {:db/doc \&quot;User name\&quot;\n    :db/ident :user/name\n    :db/valueType :db.type/string\n    :db/cardinality :db.cardinality/one\n    :db/index true\n    :db/id #db/id[:db.part/db]\n    :db.install/_attribute :db.part/db}\n   {:db/doc \&quot;User roles\&quot;\n    :db/ident :user/roles\n    :db/valueType :db.type/ref\n    :db/cardinality :db.cardinality/many\n    :db/id #db/id[:db.part/db]\n    :db.install/_attribute :db.part/db}\n   [:db/add #db/id[:db.part/user] :db/ident :user.roles/guest]\n   [:db/add #db/id[:db.part/user] :db/ident :user.roles/author]\n   [:db/add #db/id[:db.part/user] :db/ident :user.roles/editor]])\n&quot; &quot;(def group-schema [{:db/doc \&quot;Group UUID\&quot;\n                    :db/ident :group/uuid\n                    :db/valueType :db.type/uuid\n                    :db/cardinality :db.cardinality/one\n                    :db/unique :db.unique/value\n                    :db/id #db/id[:db.part/db]\n                    :db.install/_attribute :db.part/db}\n                   {:db/doc \&quot;Group name\&quot;\n                    :db/ident :group/name\n                    :db/valueType :db.type/string\n                    :db/cardinality :db.cardinality/one\n                    :db/index true\n                    :db/id #db/id[:db.part/db]\n                    :db.install/_attribute :db.part/db}\n                   {:db/doc \&quot;Group users\&quot;\n                    :db/ident :group/users\n                    :db/valueType :db.type/ref\n                    :db/cardinality :db.cardinality/many\n                    :db/id #db/id[:db.part/db]\n                    :db.install/_attribute :db.part/db}])&quot; &quot;@(d/transact (d/connect \&quot;datomic:mem://sample-database\&quot;)\n             (concat user-schema group-schema))\n&quot; &quot;(def tx-data [{:db/id (d/tempid :db.part/user) :user/email \&quot;fowler@acm.org\&quot;\n               :user/name \&quot;Martin Fowler\&quot;\n               :user/roles [:user.roles/author :user.roles/editor]}])&quot; &quot;@(d/transact conn tx-data)&quot; &quot;(q '[:find ?name\n     :where [?e :user/name ?name]]\n   (:db-after tx-result))&quot; &quot;(def new-id (d/tempid :db.part/user))&quot; &quot;(def tx-data2 [[:db/add new-id :user/email \&quot;ryan@cognitect.com\&quot;] [:db/add new-id :user/name \&quot;Ryan Neufeld\&quot;]\n               [:db/add new-id :user/roles [:user.roles/author\n                                            :user.roles/editor]]])&quot; &quot;(def tx-result @(d/transact conn tx-data2)) &quot; &quot;(q '[:find ?name\n     :where [?e :user/name ?name]]\n   (dba conn))&quot; &quot;(vector *1)&quot; &quot;(vec *2)&quot; &quot;(first *1)&quot; &quot;(def tx-data3 [[:db/add new-id :user/email \&quot;ryan@cognitect.com\&quot;]\n               [:db/add new-id :user/roles [:user.roles/author\n                                            :user.roles/editor]]])&quot; &quot;(def tx-result1 @(d/transact conn tx-data3)) &quot; &quot;(def tx-data4 [[:db/add new-id :user/email \&quot;aryan@cognitect.com\&quot;]\n               [:db/add new-id :user/roles [:user.roles/author\n                                            :user.roles/editor]]])&quot; &quot;(def tx-result2 @(d/transact conn tx-data4)) &quot; &quot;tx-result2&quot; &quot;tx-result1&quot; &quot;(q '[:find ?email\n     :where [?e :user/email ?email]]\n   (db conn))&quot; &quot;(q '[:find ?name\n     :where [?e :user/name ?name]]\n   (db conn))&quot; &quot;(clojure.pprint/pprint *1)&quot; &quot;(concat user-schema group-schema)&quot; &quot;(seq? *1)&quot; &quot;(def uri \&quot;datomic:mem://sample-database\&quot;)\n&quot; &quot;(def dba (d/db (d/connect uri)))&quot; &quot;(use '[datomic.api :only [q db] :as d])\n(use 'clojure.pprint)&quot; &quot;(def uri \&quot;datomic:free://localhost:4334/sample-database\&quot;)\n&quot; &quot;(d/create-database uri)&quot; &quot;conn&quot; &quot;uri&quot; &quot;(d/connect uri)&quot; &quot;(def uri )\n&quot; &quot;(d/connect \&quot;localhost:4334/sample\&quot;)&quot; &quot;(d/connect \&quot;free://localhost:4334/sample\&quot;)&quot; &quot;(d/connect \&quot;datomic:free://localhost:4334/sample\&quot;)&quot; &quot;(use '[datomic.api :as d])&quot; &quot;(d/create-database \&quot;datomic:free://localhost:4334/sample\&quot;)&quot; &quot;(+ 2 2)&quot; &quot;(def uri \&quot; datomic:dev://localhost:4334/sample\&quot;)&quot; &quot;(def conn (d/connect uri))&quot; &quot;(def uri \&quot;datomic:dev://localhost:4334/sample\&quot;)&quot; &quot;(d/create-database \&quot;datomic:dev://localhost:4334/sample-database\&quot;)&quot; &quot;(d/create-database \&quot;datomic:pro://localhost:4334/sample-database\&quot;)&quot; &quot;(d/create-database \&quot;datomic:free://localhost:4334/sample-database\&quot;)&quot; &quot;(d/connect \&quot;datomic:free://localhost:4334/sample-database\&quot;)&quot; &quot;(use '[datomic.api :only [q db] :as d])&quot; &quot;(d/create-database \&quot;datomic:free://localhost:4334/sample12\&quot;)&quot; &quot;(d/connect \&quot;datomic:free://localhost:4334/sample12\&quot;)&quot; &quot;(print *e)&quot;], :remote []}}</component>
</project>